1. In your own words, explain what clean code is and why it is important.

A: As developers its important to write code that is readable, easily maintainable and code that errs on the side of simplicity. The principle of taking into account these factors while writing code is known as clean code.
Writing clean, high quality code is important when working on a team with other developers and with large-scale, complex applications so that the code is easy to read, maintain and reuse as needed.
 
2. Read this article about Toyota and their use of bad code. Think about another commonly used object  that relies on computers and explain what would happen if the code was not created to an acceptable standard.

A:  Bank operations Management software handles everyday bank operations like account opening, E-signatures, Wire transfer execution etc. If this software is not written to an acceptable standard it can lead to erroneous and dangerous operations that can result in fraudulent accounts, wire transfers in large amounts to wrong clients or from wrong accounts and may cause customers to lose their life savings.

3. Would you consider the following to be clean code? Explain why or why not. If not, refactor the code.

FUNCTION do(x, y)               // Creating a new function
 IF y = "F" THEN               // Check if y is equal "F"
 SET z to (x−32) * (5/9)       // Formula to convert degrees fahrenheit to celsius
 PRINT z                       // Print result
 ELSE IF y = "C" THEN          // If y not equal to "F", check if equal to "C"
 SET z to x * 1.8000 + 32.00   // Formula to convert degrees celsius to fahrenheit
 PRINT z                       // Print result
 END IF
END FUNCTION

A: I do not consider the above code to be clean code for the following reasons.
	- The code has too many comments, which takes away from the readability of the code and also hard to maintain.  
	- Code does not use meaningful naming convention for the function. The function name does not make it clear the purpose of the function. 	
	- Proper nesting of conditionals is not implemented. Appropriate nesting is important for the readability of the code and to establish a visual hierarchy.

#### Refactored code


FUNCTION convertDegrees(temperature,scale)    
    IF scale = "Fahrenheit" THEN               
       SET  fahrenheitToCelsius  to (temperature−32) * (5/9)       // Formula to convert degrees fahrenheit to celsius
       PRINT fahrenheitToCelsius                        
    ELSE IF scale = "Celsius" THEN          
       SET celsiusToFarenheit to temperature * 1.8000 + 32.00     // Formula to convert degrees celsius to fahrenheit
       PRINT celsiusToFahrenheit                      
    END IF
END FUNCTION


4. Would you consider the following to be clean code? Explain why or why not. If not, refactor the code.


FUNCTION calcPercent(sum, total)
    IF NOT(total = 0) THEN
       SET percentage to sum / total * 100
    ELSE
       PRINT "Sorry, cannot divide by 0"
    END IF
PRINT percentage
END FUNCTION


A: I do not consider the above code to be clean code because because the function name is abbreviated. Its best practice to not abbreviate function names for clarity and for readability.

#### Refactored code

FUNCTION calculatePercentage(sum, total)
    IF NOT(total = 0) THEN
       SET percentage to sum / total * 100
    ELSE
       PRINT "Sorry, cannot divide by 0"
    END IF
    PRINT percentage
END FUNCTION



5. Using pseudocode, refactor the code for the following examples using the principles you have learned in this checkpoint.

5a. The following function prints the subtotal of a customer’s transaction and receives payment accordingly.


FUNCTION checkOutCustomer(subTotal, discountRate, paymentType)
   PRINT "Your total due is: " + subTotal * discountRate + (subTotal * tax)

   IF paymentType = 'CASH' THEN
       CALL getPayment RETURNING amount
       PRINT "Change due: " + amount - subTotal * discountRate + (subTotal * tax)
   ELSE IF paymentType = 'CREDIT CARD' THEN
       CALL getPayment RETURNING amount
       PRINT "Your credit card has been charged: " + subTotal * discountRate + (subTotal * tax)
   END IF
END FUNCTION



#### Refactored code

Use the DRY principle and store subTotal * discountRate + (subTotal * tax)  in a variable called total and reuse that variable in different parts of the code.


FUNCTION checkOutCustomer(subTotal, discountRate, paymentType)
   SET total to subTotal * discountRate + (subTotal * tax)
   PRINT "Your total due is: " + total

   IF paymentType = 'CASH' THEN
       CALL getPayment RETURNING amount
       PRINT "Change due: " + amount - total
   ELSE IF paymentType = 'CREDIT CARD' THEN
       CALL getPayment RETURNING amount
       PRINT "Your credit card has been charged: " + total
   END IF
END FUNCTION


5b. The following function checks out a book if there are no issues with the guest’s account.


FUNCTION checkoutBook(book, guest)
 IF guest.accountActive THEN
     IF NOT(guest.hasOverdueBooks) THEN
         IF guest.outstandingFees = 0 THEN
           APPEND book to guest.books
           SET book.status to "Checked Out"
           PRINT "Your books have been issued."
         END IF
     END IF
 ELSE
     PRINT "Unable to check out book."
 END IF
END FUNCTION


#### Refactored code

Use the principle of extracting methods to achieve code readability and  reduce nesting.



FUNCTION checkoutBook(book, guest)
    IF guest.accountActive THEN
       CALL checkAccountStatus WITH book, guest
    ELSE
       PRINT "Unable to check out book."
    END IF
END FUNCTION

FUNCTION CheckAccountStatus(book, guest)
    IF NOT(guest.hasOverdueBooks) AND guest.outstandingFees = 0 THEN
       APPEND book to guest.books
       SET book.status to "Checked Out"
       PRINT "Your books have been issued."
    END IF
END FUNCTION



5c. The following class is a code snippet that should support the transactions a customer can perform at an ATM.


CLASS BankAccount

 FUNCTION displayBalance
    PRINT balance
 END FUNCTION

 FUNCTION deposit(amount)
    SET balance to balance + amount
 END FUNCTION

 FUNCTION withdraw(amount)
     IF balance > amount THEN
       SET balance to balance - amount
     END
 END FUNCTION

 FUNCTION creditCardOffer
     IF NOT(customer.hasCreditCard) THEN
         CALL offerCreditCard
     END
 END FUNCTION

 FUNCTION checkStatus
     IF NOT(customer.hasCheckingAccount) THEN
         CALL offerCheckingAccount
     END
 END FUNCTION

 ....
 ....
 ....

END

 
#### Refactored code

Use Single Responsibility Principle. Move the functions creditCardOffer and checkStatus to a different class.


CLASS BankAccount

   FUNCTION displayBalance
      PRINT balance
   END FUNCTION

   FUNCTION deposit(amount)
      SET balance to balance + amount
   END FUNCTION

   FUNCTION withdraw(amount)
       IF balance > amount THEN
         SET balance to balance - amount
       END 
   END FUNCTION

END CLASS

CLASS Offers

   FUNCTION creditCardOffer
      IF NOT(customer.hasCreditCard) THEN
         CALL offerCreditCard
      END
   END FUNCTION

   FUNCTION checkStatus
      IF NOT(customer.hasCheckingAccount) THEN
         CALL offerCheckingAccount
      END
   END FUNCTION

END CLASS
 

Programming Questions 

6. Square. Given an array of integers, find out whether the sum of the integers is a perfect square. If it is a perfect square, return the square root, otherwise return the sum.

A: 

function checkPerfectSquare (arr) {
  let sum = arr.reduce((elem, total) => elem + total);
  let squareRoot = Math.sqrt(sum);
  if( squareRoot % 1 === 0 ) {
    return squareRoot;
  }
  else {
    return sum;
  }
}

7. Duplicate. Given an array of integers, find out whether the array contains any duplicate elements. The function should return true if any value appears at least twice in the array, and false if every element is distinct.

function isDuplicate(arr) {
  let found = false;
  arr.forEach((elem,index)=>{
    if(arr.indexOf(elem,index+1) > -1){
      found = true;
    }
  });
  return found;
}

Extra Credit
8. Anagram. An anagram is a word, phrase, or name formed by rearranging the letters of another word. For example, spar can be formed from rasp. Given two strings, stringOne and stringTwo, determine if stringOne is an anagram of stringTwo. Assume that the strings contain only lowercase letters and do not worry about case-sensitivity. Hint: Your first task will be to convert the strings to arrays.
function isAnagram(str1, str2) {
  let arr1 = str1.split("").sort();                          // convert string to array and sort
  let arr2 = str2.split("").sort();
  if(arr1.join('').trim() === arr2.join('').trim()) {    // convert array to string and remove whitespaces, then check if same.
    return true;
  }
  else {
    return false;
  }
}













